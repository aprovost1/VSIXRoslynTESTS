<UserControl x:Class="NP.XAMLIntellisenseExtensionForVS2017.XAMLIntellisensePresenterControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:NP.XAMLIntellisenseExtensionForVS2017"
             mc:Ignorable="d" 
             Focusable="False">
    <Grid>
        <Grid x:Name="TheCompletionsGrid"
              HorizontalAlignment="Left"
              VerticalAlignment="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!-- Completions ListView -->
            <ListView x:Name="TheCompletionsListView"
                      BorderBrush="Orange"
                      ItemsSource="{Binding Path=TheCompletionsCollectionView, 
                                            RelativeSource={RelativeSource AncestorType=UserControl}}"
                      IsSynchronizedWithCurrentItem="True"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Top"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      Width="300"
                      Height="200">
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="Padding"
                                Value="0"/>
                        <Setter Property="HorizontalContentAlignment"
                                Value="Stretch"/>
                        <!-- make ListViewItem non-focusable and set its behavior
                             in order to make the MouseDown event propagate 
                             over to the whole popup-->
                        <Setter Property="Focusable"
                                Value="False"/>
                        <Setter Property="local:ResendEventBehavior.TheResendEventBehavior">
                            <Setter.Value>
                                <local:ResendEventBehavior TheRoutedEvent="{x:Static FrameworkElement.MouseDownEvent}"/>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Grid x:Name="TheItemTopPanel"
                              Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <!-- Completion Icon -->
                            <Image Source="{Binding Path=IconSource}"
                                   Margin="2,0,5,0"
                                   Width="13"
                                   Height="13"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"/>
                            <!-- Completion Text -->
                            <TextBlock x:Name="TheCompletionText"
                                       Text="{Binding Path=DisplayText}" 
                                       Grid.Column="1"
                                       Margin="0,0,20,0"/>
                        </Grid>
                        <DataTemplate.Triggers>
                            <!-- change the item foreground and background when selected-->
                            <DataTrigger Binding="{Binding Path=IsSelected, 
                                                           RelativeSource={RelativeSource AncestorType=ListBoxItem}}"
                                         Value="True">
                                <Setter TargetName="TheItemTopPanel"
                                        Property="Background"
                                        Value="#FF007ACC"/>
                                <Setter TargetName="TheCompletionText"
                                        Property="Foreground"
                                        Value="White"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
            <Border Grid.Row="1"
                    Background="White"
                    BorderThickness="1,0,1,1"
                    BorderBrush="Orange">
                <ItemsControl x:Name="TheCompletionTypeFilters"
                          Focusable="False"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Center"
                          ItemsSource="{Binding Path=TheCompletionFilters, 
                                                RelativeSource={RelativeSource AncestorType=UserControl}}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <!-- arrange the filters horizontally -->
                            <StackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <!-- CheckBox.IsChecked property is connected to the 
                                 IsOn property on the CompletionTypeFilter view model -->
                            <CheckBox IsChecked="{Binding Path=IsOn, 
                                                          Mode=TwoWay}">
                                <CheckBox.Template>
                                    <ControlTemplate TargetType="CheckBox">
                                        <Grid x:Name="FilterItemPanel" 
                                              Width="20"
                                              Height="20">
                                            <!-- filter icon -->
                                            <Image HorizontalAlignment="Center"
                                                   VerticalAlignment="Center"
                                                   Width="13"
                                                   Height="13"
                                                   Source="{Binding Path=TheIcon}"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <!-- change filter look on mouse over -->
                                            <Trigger Property="IsMouseOver"
                                                     Value="True">
                                                <Setter TargetName="FilterItemPanel"
                                                        Property="Background"
                                                        Value="#FF007ACC"/>
                                            </Trigger>

                                            <!-- change filter look when IsOn == true -->
                                             <DataTrigger Binding="{Binding Path=IsOn}"
                                                         Value="True">
                                                <Setter TargetName="FilterItemPanel"
                                                        Property="Background"
                                                        Value="#FF007ACC"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </CheckBox.Template>
                            </CheckBox>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Border>
        </Grid>
    </Grid>
</UserControl>
